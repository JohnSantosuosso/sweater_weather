require 'rails_helper'

RSpec.describe ForecastService do
  it 'can get forecast data', :vcr do
    coordinates = {lat: 39.738453, lng: -104.984853}
    forecast = ForecastService.call_for_forecast(coordinates)
    
    expect(forecast).to be_a(Hash)
    expect(forecast).to have_key(:current)
    expect(forecast[:current]).to be_an(Hash)
    expect(forecast[:current][:weather].first).to have_key(:description)
    expect(forecast[:current][:weather].first[:description]).to be_a(String)
    expect(forecast[:current]).to be_a(Hash)
    expect(forecast[:current]).to have_key(:temp)
    expect(forecast[:current][:temp]).to be_a(Float)
    expect(forecast[:current]).to have_key(:feels_like)
    expect(forecast[:current][:feels_like]).to be_a(Float)
    expect(forecast[:current]).to have_key(:humidity)
    expect(forecast[:current][:humidity]).to be_a(Numeric)
    expect(forecast[:current]).to have_key(:wind_speed)
    expect(forecast[:current][:wind_speed]).to be_a(Numeric)
    expect(forecast[:current]).to have_key(:visibility)
    expect(forecast[:current][:visibility]).to be_a(Numeric)
    expect(forecast[:current]).to have_key(:sunrise)
    expect(forecast[:current][:sunrise]).to be_a(Numeric)
    expect(forecast[:current]).to have_key(:sunset)
    expect(forecast[:current][:sunset]).to be_a(Numeric)
    expect(forecast[:current]).to have_key(:weather)
    expect(forecast[:current][:weather]).to be_an(Array)
    expect(forecast[:current][:weather].first).to have_key(:description)
    expect(forecast[:current][:weather].first[:description]).to be_a(String)
    expect(forecast[:current][:weather].first).to have_key(:icon)
    expect(forecast[:current][:weather].first[:icon]).to be_a(String)
    expect(forecast).to have_key(:hourly)
    expect(forecast[:hourly]).to be_an(Array)
    expect(forecast[:hourly].first).to have_key(:dt)
    expect(forecast[:hourly].first[:dt]).to be_a(Numeric)
    expect(forecast[:hourly].first).to have_key(:temp)
    expect(forecast[:hourly].first[:temp]).to be_a(Float)
    expect(forecast[:hourly].first).to have_key(:wind_speed)
    expect(forecast[:hourly].first[:wind_speed]).to be_a(Numeric)
    expect(forecast[:hourly].first).to have_key(:weather)
    expect(forecast[:hourly].first[:weather]).to be_an(Array)
    expect(forecast[:hourly].first[:weather].first).to have_key(:description)
    expect(forecast[:hourly].first[:weather].first[:description]).to be_a(String)
    expect(forecast[:hourly].first[:weather].first).to have_key(:icon)
    expect(forecast[:hourly].first[:weather].first[:icon]).to be_a(String)
    expect(forecast).to have_key(:daily)
    expect(forecast[:daily]).to be_an(Array)
    expect(forecast[:daily].first).to have_key(:dt)
    expect(forecast[:daily].first[:dt]).to be_a(Numeric)
    expect(forecast[:daily].first).to have_key(:sunrise)
    expect(forecast[:daily].first[:sunrise]).to be_a(Numeric)
    expect(forecast[:daily].first).to have_key(:sunset)
    expect(forecast[:daily].first[:sunset]).to be_a(Numeric)
    expect(forecast[:daily].first).to have_key(:temp)
    expect(forecast[:daily].first[:temp]).to be_a(Hash)
    expect(forecast[:daily].first[:temp]).to have_key(:max)
    expect(forecast[:daily].first[:temp]).to have_key(:min)
    expect(forecast[:daily].first[:temp][:min]).to be_a(Float)
    expect(forecast[:daily].first).to have_key(:weather)
    expect(forecast[:daily].first[:weather]).to be_an(Array)
    expect(forecast[:daily].first[:weather].first).to have_key(:description)
    expect(forecast[:daily].first[:weather].first[:description]).to be_a(String)
    expect(forecast[:daily].first[:weather].first).to have_key(:icon)
    expect(forecast[:daily].first[:weather].first[:icon]).to be_a(String)
  end
end
  
